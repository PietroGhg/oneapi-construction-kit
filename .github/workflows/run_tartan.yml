# Build, Run and Test Tartan EchoSystem
name: Build and Run Tartan
on:
  pull_request:
    paths:
      - '.github/workflows/run_tartan.yml'
  schedule:
    - cron: '30 23 * * *'  # Runs the workflow at midnight every day
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:

  # build and run for RISCV
  run_riscv_m1_tartan:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

       # installs tools, ninja, installs llvm and sets up sccahe
      - name: setup ubuntu
        uses:  ./.github/actions/setup_ubuntu_build
        with:
          llvm_version: 17
          llvm_build_type: RelAssert

      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install Python libraries and system dependencies
        run: |
          pip install requests numpy h5py Pillow
          sudo add-apt-repository universe
          sudo apt-get update
          sudo apt-get install -y libblas-dev libopenblas64-dev libopenblas-dev libpthread-stubs0-dev libboost-all-dev

      - name: build riscv M1
        uses: ./.github/actions/do_build_ock/do_build_m1

      - name: Download Daily Release
        run: |
          wget "https://github.com/intel/llvm/releases/download/nightly-2023-11-22/sycl_linux.tar.gz"
          mkdir linux_nightly_release
          tar -xzf sycl_linux.tar.gz -C linux_nightly_release
          ls

      - name: Clone portDNN
        run: git clone --recursive https://github.com/codeplaysoftware/portDNN.git

      - name: Set up Environment and build portDNN
        run: |
          ls
          export LD_LIBRARY_PATH=$(pwd)/linux_nightly_release/lib:$(pwd)/linux_nightly_release/lib/libsycl.so:$LD_LIBRARY_PATH
          export OCL_ICD_FILENAMES=$(pwd)/build/lib/libCL.so
          export CMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu/openblas64-pthread
          export CMAKE_INSTALL_PREFIX=/usr/lib/x86_64-linux-gnu/openblas64-pthread
          export CMAKE_CXX_COMPILER=$(pwd)/linux_nightly_release/bin/clang++
          export CMAKE_C_COMPILER=$(pwd)/linux_nightly_release/bin/clang

          cmake -B portDNN_build_dir portDNN -GNinja -DCMAKE_CXX_COMPILER=$(pwd)/linux_nightly_release/bin/clang++ -DSNN_BUILD_BENCHMARKS=OFF -DSNN_BENCH_SYCLBLAS=OFF -DSNN_BUILD_DOCUMENTATION=OFF
          ninja -C portDNN_build_dir