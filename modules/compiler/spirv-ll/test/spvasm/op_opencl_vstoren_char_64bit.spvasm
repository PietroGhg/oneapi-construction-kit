; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a OpenCL -b 64 -c Addresses %spv_file_s | FileCheck %s
               OpCapability Addresses
               OpCapability Kernel
               OpCapability Vector16
               OpCapability Int64
               OpCapability Int8
          %1 = OpExtInstImport "OpenCL.std"
               OpMemoryModel Physical64 OpenCL
               OpEntryPoint Kernel %7 "foo"
               OpSource OpenCL_C 102000
               OpName %out "out"
               OpName %loc "loc"
               OpName %entry "entry"
      %uchar = OpTypeInt 8 0
      %ulong = OpTypeInt 64 0
    %uchar_2 = OpConstant %uchar 2
    %ulong_0 = OpConstant %ulong 0
    %uchar_3 = OpConstant %uchar 3
    %uchar_4 = OpConstant %uchar 4
    %uchar_8 = OpConstant %uchar 8
   %uchar_16 = OpConstant %uchar 16
       %void = OpTypeVoid
%_ptr_CrossWorkgroup_uchar = OpTypePointer CrossWorkgroup %uchar
%_ptr_Workgroup_uchar = OpTypePointer Workgroup %uchar
          %6 = OpTypeFunction %void %_ptr_CrossWorkgroup_uchar %_ptr_Workgroup_uchar
    %v2uchar = OpTypeVector %uchar 2
    %v3uchar = OpTypeVector %uchar 3
    %v4uchar = OpTypeVector %uchar 4
    %v8uchar = OpTypeVector %uchar 8
   %v16uchar = OpTypeVector %uchar 16
         %13 = OpConstantComposite %v2uchar %uchar_2 %uchar_2
         %19 = OpConstantComposite %v3uchar %uchar_3 %uchar_3 %uchar_3
         %23 = OpConstantComposite %v4uchar %uchar_4 %uchar_4 %uchar_4 %uchar_4
         %27 = OpConstantComposite %v8uchar %uchar_8 %uchar_8 %uchar_8 %uchar_8 %uchar_8 %uchar_8 %uchar_8 %uchar_8
         %31 = OpConstantComposite %v16uchar %uchar_16 %uchar_16 %uchar_16 %uchar_16 %uchar_16 %uchar_16 %uchar_16 %uchar_16 %uchar_16 %uchar_16 %uchar_16 %uchar_16 %uchar_16 %uchar_16 %uchar_16 %uchar_16
          %7 = OpFunction %void None %6
        %out = OpFunctionParameter %_ptr_CrossWorkgroup_uchar
        %loc = OpFunctionParameter %_ptr_Workgroup_uchar
      %entry = OpLabel
         %16 = OpExtInst %void %1 vstoren %13 %ulong_0 %out
; CHECK: call spir_func void @_Z7vstore2Dv2_hmPU3AS1h(<2 x i8> <i8 2, i8 2>, i64 0, ptr addrspace(1) %out)
         %20 = OpExtInst %void %1 vstoren %19 %ulong_0 %out
; CHECK: call spir_func void @_Z7vstore3Dv3_hmPU3AS1h(<3 x i8> <i8 3, i8 3, i8 3>, i64 0, ptr addrspace(1) %out)
         %24 = OpExtInst %void %1 vstoren %23 %ulong_0 %out
; CHECK: call spir_func void @_Z7vstore4Dv4_hmPU3AS1h(<4 x i8> <i8 4, i8 4, i8 4, i8 4>, i64 0, ptr addrspace(1) %out)
         %28 = OpExtInst %void %1 vstoren %27 %ulong_0 %out
; CHECK: call spir_func void @_Z7vstore8Dv8_hmPU3AS1h(<8 x i8> <i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8>, i64 0, ptr addrspace(1) %out)
         %32 = OpExtInst %void %1 vstoren %31 %ulong_0 %out
; CHECK: call spir_func void @_Z8vstore16Dv16_hmPU3AS1h(<16 x i8> <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>, i64 0, ptr addrspace(1) %out)
         %33 = OpExtInst %void %1 vstoren %13 %ulong_0 %loc
; CHECK: call spir_func void @_Z7vstore2Dv2_hmPU3AS3h(<2 x i8> <i8 2, i8 2>, i64 0, ptr addrspace(3) %loc)
         %34 = OpExtInst %void %1 vstoren %19 %ulong_0 %loc
; CHECK: call spir_func void @_Z7vstore3Dv3_hmPU3AS3h(<3 x i8> <i8 3, i8 3, i8 3>, i64 0, ptr addrspace(3) %loc)
         %35 = OpExtInst %void %1 vstoren %23 %ulong_0 %loc
; CHECK: call spir_func void @_Z7vstore4Dv4_hmPU3AS3h(<4 x i8> <i8 4, i8 4, i8 4, i8 4>, i64 0, ptr addrspace(3) %loc)
         %36 = OpExtInst %void %1 vstoren %27 %ulong_0 %loc
; CHECK: call spir_func void @_Z7vstore8Dv8_hmPU3AS3h(<8 x i8> <i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8, i8 8>, i64 0, ptr addrspace(3) %loc)
         %37 = OpExtInst %void %1 vstoren %31 %ulong_0 %loc
; CHECK: call spir_func void @_Z8vstore16Dv16_hmPU3AS3h(<16 x i8> <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>, i64 0, ptr addrspace(3) %loc)
               OpReturn
               OpFunctionEnd
