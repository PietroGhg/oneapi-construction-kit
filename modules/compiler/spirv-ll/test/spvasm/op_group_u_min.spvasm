; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a OpenCL -b 64 %spv_file_s -o %t
; RUN: opt -S --passes=always-inline %t -o - | FileCheck -- %s

                              OpCapability Addresses
                              OpCapability Kernel
                              OpCapability Groups

                              OpMemoryModel Physical64 OpenCL

                              OpEntryPoint Kernel %sub_group_reduction_fcn "sub_group_reduction"
                              OpEntryPoint Kernel %sub_group_scan_inc_fcn "sub_group_scan_inclusive"
                              OpEntryPoint Kernel %sub_group_scan_exc_fcn "sub_group_scan_exclusive"

                              OpName %sub_group_reduction_in "a"
                              OpName %sub_group_scan_inc_in "a"
                              OpName %sub_group_scan_exc_in "a"

                  %uint_ty  = OpTypeInt 32 0
%ptr_CrossWorkgroup_uint_ty = OpTypePointer CrossWorkgroup %uint_ty
                   %void_ty = OpTypeVoid
          %fcn_ty = OpTypeFunction %void_ty %ptr_CrossWorkgroup_uint_ty

           %sub_group_scope = OpConstant %uint_ty 3

; CHECK: define spir_kernel void @sub_group_reduction(ptr addrspace(1) noundef [[IN:%.*]])
   %sub_group_reduction_fcn = OpFunction %void_ty None %fcn_ty
    %sub_group_reduction_in = OpFunctionParameter %ptr_CrossWorkgroup_uint_ty
    %sub_group_reduction_bb = OpLabel
; CHECK: [[VAL:%.*]] = load i32, ptr addrspace(1) [[IN]], align 4
   %sub_group_reduction_val = OpLoad %uint_ty %sub_group_reduction_in Aligned 4
; CHECK: [[RES:%.*]] = call spir_func i32 @_Z20sub_group_reduce_minj(i32 [[VAL]])
   %sub_group_reduction_res = OpGroupUMin %uint_ty %sub_group_scope Reduce %sub_group_reduction_val
; CHECK: store i32 [[RES]], ptr addrspace(1) [[IN]]
                              OpStore %sub_group_reduction_in %sub_group_reduction_res Aligned 4
; CHECK: ret void
                              OpReturn
                              OpFunctionEnd

; CHECK: declare spir_func i32 @_Z20sub_group_reduce_minj(i32)

; CHECK: define spir_kernel void @sub_group_scan_inclusive(ptr addrspace(1) noundef [[IN:%.*]])
    %sub_group_scan_inc_fcn = OpFunction %void_ty None %fcn_ty
     %sub_group_scan_inc_in = OpFunctionParameter %ptr_CrossWorkgroup_uint_ty
     %sub_group_scan_inc_bb = OpLabel
; CHECK: [[VAL:%.*]] = load i32, ptr addrspace(1) [[IN]], align 4
    %sub_group_scan_inc_val = OpLoad %uint_ty %sub_group_scan_inc_in Aligned 4
; CHECK: [[RES:%.*]] = call spir_func i32 @_Z28sub_group_scan_inclusive_minj(i32 [[VAL]])
    %sub_group_scan_inc_res = OpGroupUMin %uint_ty %sub_group_scope InclusiveScan %sub_group_scan_inc_val
; CHECK: store i32 [[RES]], ptr addrspace(1) [[IN]]
                              OpStore %sub_group_scan_inc_in %sub_group_scan_inc_res Aligned 4
; CHECK: ret void
                              OpReturn
                              OpFunctionEnd

; CHECK: declare spir_func i32 @_Z28sub_group_scan_inclusive_minj(i32)

; CHECK: define spir_kernel void @sub_group_scan_exclusive(ptr addrspace(1) noundef [[IN:%.*]])
    %sub_group_scan_exc_fcn = OpFunction %void_ty None %fcn_ty
     %sub_group_scan_exc_in = OpFunctionParameter %ptr_CrossWorkgroup_uint_ty
     %sub_group_scan_exc_bb = OpLabel
; CHECK: [[VAL:%.*]] = load i32, ptr addrspace(1) [[IN]], align 4
    %sub_group_scan_exc_val = OpLoad %uint_ty %sub_group_scan_exc_in Aligned 4
; CHECK: [[RES:%.*]] = call spir_func i32 @_Z28sub_group_scan_exclusive_minj(i32 [[VAL]])
    %sub_group_scan_exc_res = OpGroupUMin %uint_ty %sub_group_scope ExclusiveScan %sub_group_scan_exc_val
; CHECK: store i32 [[RES]], ptr addrspace(1) [[IN]]
                              OpStore %sub_group_scan_exc_in %sub_group_scan_exc_res Aligned 4
; CHECK: ret void
                              OpReturn
                              OpFunctionEnd

; CHECK: declare spir_func i32 @_Z28sub_group_scan_exclusive_minj(i32)
