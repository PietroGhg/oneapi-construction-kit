; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a OpenCL -b 64 -c Addresses -c Float64 %spv_file_s | FileCheck %s
               OpCapability Addresses
               OpCapability Kernel
               OpCapability Vector16
               OpCapability Float64
               OpCapability Int64
          %1 = OpExtInstImport "OpenCL.std"
               OpMemoryModel Physical64 OpenCL
               OpEntryPoint Kernel %7 "foo"
               OpSource OpenCL_C 102000
               OpName %in "in"
               OpName %loc "loc"
               OpName %entry "entry"
               OpName %call "call"
               OpName %call1 "call1"
               OpName %call2 "call2"
               OpName %call3 "call3"
               OpName %call4 "call4"
               OpName %call5 "call5"
               OpName %call6 "call6"
               OpName %call7 "call7"
               OpName %call8 "call8"
               OpName %call9 "call9"
      %ulong = OpTypeInt 64 0
    %ulong_0 = OpConstant %ulong 0
       %void = OpTypeVoid
     %double = OpTypeFloat 64
%_ptr_CrossWorkgroup_double = OpTypePointer CrossWorkgroup %double
%_ptr_Workgroup_double = OpTypePointer Workgroup %double
          %6 = OpTypeFunction %void %_ptr_CrossWorkgroup_double %_ptr_Workgroup_double
   %v2double = OpTypeVector %double 2
   %v3double = OpTypeVector %double 3
   %v4double = OpTypeVector %double 4
   %v8double = OpTypeVector %double 8
  %v16double = OpTypeVector %double 16
          %7 = OpFunction %void None %6
         %in = OpFunctionParameter %_ptr_CrossWorkgroup_double
        %loc = OpFunctionParameter %_ptr_Workgroup_double
      %entry = OpLabel
       %call = OpExtInst %v2double %1 vloadn %ulong_0 %in 2
; CHECK: = call spir_func <2 x double> @_Z6vload2mPU3AS1Kd(i64 0, ptr addrspace(1) %in)
      %call1 = OpExtInst %v3double %1 vloadn %ulong_0 %in 3
; CHECK: = call spir_func <3 x double> @_Z6vload3mPU3AS1Kd(i64 0, ptr addrspace(1) %in)
      %call2 = OpExtInst %v4double %1 vloadn %ulong_0 %in 4
; CHECK: = call spir_func <4 x double> @_Z6vload4mPU3AS1Kd(i64 0, ptr addrspace(1) %in)
      %call3 = OpExtInst %v8double %1 vloadn %ulong_0 %in 8
; CHECK: = call spir_func <8 x double> @_Z6vload8mPU3AS1Kd(i64 0, ptr addrspace(1) %in)
      %call4 = OpExtInst %v16double %1 vloadn %ulong_0 %in 16
; CHECK: = call spir_func <16 x double> @_Z7vload16mPU3AS1Kd(i64 0, ptr addrspace(1) %in)
      %call5 = OpExtInst %v2double %1 vloadn %ulong_0 %loc 2
; CHECK: = call spir_func <2 x double> @_Z6vload2mPU3AS3Kd(i64 0, ptr addrspace(3) %loc)
      %call6 = OpExtInst %v3double %1 vloadn %ulong_0 %loc 3
; CHECK: = call spir_func <3 x double> @_Z6vload3mPU3AS3Kd(i64 0, ptr addrspace(3) %loc)
      %call7 = OpExtInst %v4double %1 vloadn %ulong_0 %loc 4
; CHECK: = call spir_func <4 x double> @_Z6vload4mPU3AS3Kd(i64 0, ptr addrspace(3) %loc)
      %call8 = OpExtInst %v8double %1 vloadn %ulong_0 %loc 8
; CHECK: = call spir_func <8 x double> @_Z6vload8mPU3AS3Kd(i64 0, ptr addrspace(3) %loc)
      %call9 = OpExtInst %v16double %1 vloadn %ulong_0 %loc 16
; CHECK: = call spir_func <16 x double> @_Z7vload16mPU3AS3Kd(i64 0, ptr addrspace(3) %loc)
               OpReturn
               OpFunctionEnd
