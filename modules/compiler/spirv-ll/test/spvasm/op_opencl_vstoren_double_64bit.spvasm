; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a OpenCL -b 64 -c Addresses -c Float64 %spv_file_s | FileCheck %s
               OpCapability Addresses
               OpCapability Kernel
               OpCapability Vector16
               OpCapability Float64
               OpCapability Int64
          %1 = OpExtInstImport "OpenCL.std"
               OpMemoryModel Physical64 OpenCL
               OpEntryPoint Kernel %7 "foo"
               OpSource OpenCL_C 102000
               OpName %out "out"
               OpName %loc "loc"
               OpName %entry "entry"
      %ulong = OpTypeInt 64 0
    %ulong_0 = OpConstant %ulong 0
       %void = OpTypeVoid
     %double = OpTypeFloat 64
%_ptr_CrossWorkgroup_double = OpTypePointer CrossWorkgroup %double
%_ptr_Workgroup_double = OpTypePointer Workgroup %double
          %6 = OpTypeFunction %void %_ptr_CrossWorkgroup_double %_ptr_Workgroup_double
   %v2double = OpTypeVector %double 2
   %v3double = OpTypeVector %double 3
   %v4double = OpTypeVector %double 4
   %v8double = OpTypeVector %double 8
  %v16double = OpTypeVector %double 16
   %double_2 = OpConstant %double 2
         %13 = OpConstantComposite %v2double %double_2 %double_2
   %double_3 = OpConstant %double 3
         %19 = OpConstantComposite %v3double %double_3 %double_3 %double_3
   %double_4 = OpConstant %double 4
         %23 = OpConstantComposite %v4double %double_4 %double_4 %double_4 %double_4
   %double_8 = OpConstant %double 8
         %27 = OpConstantComposite %v8double %double_8 %double_8 %double_8 %double_8 %double_8 %double_8 %double_8 %double_8
  %double_16 = OpConstant %double 16
         %31 = OpConstantComposite %v16double %double_16 %double_16 %double_16 %double_16 %double_16 %double_16 %double_16 %double_16 %double_16 %double_16 %double_16 %double_16 %double_16 %double_16 %double_16 %double_16
          %7 = OpFunction %void None %6
        %out = OpFunctionParameter %_ptr_CrossWorkgroup_double
        %loc = OpFunctionParameter %_ptr_Workgroup_double
      %entry = OpLabel
         %16 = OpExtInst %void %1 vstoren %13 %ulong_0 %out
; CHECK: call spir_func void @_Z7vstore2Dv2_dmPU3AS1d(<2 x double> <double 2.000000e+00, double 2.000000e+00>, i64 0, ptr addrspace(1) %out)
         %20 = OpExtInst %void %1 vstoren %19 %ulong_0 %out
; CHECK: call spir_func void @_Z7vstore3Dv3_dmPU3AS1d(<3 x double> <double 3.000000e+00, double 3.000000e+00, double 3.000000e+00>, i64 0, ptr addrspace(1) %out)
         %24 = OpExtInst %void %1 vstoren %23 %ulong_0 %out
; CHECK: call spir_func void @_Z7vstore4Dv4_dmPU3AS1d(<4 x double> <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>, i64 0, ptr addrspace(1) %out)
         %28 = OpExtInst %void %1 vstoren %27 %ulong_0 %out
; CHECK: call spir_func void @_Z7vstore8Dv8_dmPU3AS1d(<8 x double> <double 8.000000e+00, double 8.000000e+00, double 8.000000e+00, double 8.000000e+00, double 8.000000e+00, double 8.000000e+00, double 8.000000e+00, double 8.000000e+00>, i64 0, ptr addrspace(1) %out)
         %32 = OpExtInst %void %1 vstoren %31 %ulong_0 %out
; CHECK: call spir_func void @_Z8vstore16Dv16_dmPU3AS1d(<16 x double> <double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01>, i64 0, ptr addrspace(1) %out)
         %33 = OpExtInst %void %1 vstoren %13 %ulong_0 %loc
; CHECK: call spir_func void @_Z7vstore2Dv2_dmPU3AS3d(<2 x double> <double 2.000000e+00, double 2.000000e+00>, i64 0, ptr addrspace(3) %loc)
         %34 = OpExtInst %void %1 vstoren %19 %ulong_0 %loc
; CHECK: call spir_func void @_Z7vstore3Dv3_dmPU3AS3d(<3 x double> <double 3.000000e+00, double 3.000000e+00, double 3.000000e+00>, i64 0, ptr addrspace(3) %loc)
         %35 = OpExtInst %void %1 vstoren %23 %ulong_0 %loc
; CHECK: call spir_func void @_Z7vstore4Dv4_dmPU3AS3d(<4 x double> <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>, i64 0, ptr addrspace(3) %loc)
         %36 = OpExtInst %void %1 vstoren %27 %ulong_0 %loc
; CHECK: call spir_func void @_Z7vstore8Dv8_dmPU3AS3d(<8 x double> <double 8.000000e+00, double 8.000000e+00, double 8.000000e+00, double 8.000000e+00, double 8.000000e+00, double 8.000000e+00, double 8.000000e+00, double 8.000000e+00>, i64 0, ptr addrspace(3) %loc)
         %37 = OpExtInst %void %1 vstoren %31 %ulong_0 %loc
; CHECK: call spir_func void @_Z8vstore16Dv16_dmPU3AS3d(<16 x double> <double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01, double 1.600000e+01>, i64 0, ptr addrspace(3) %loc)
               OpReturn
               OpFunctionEnd
