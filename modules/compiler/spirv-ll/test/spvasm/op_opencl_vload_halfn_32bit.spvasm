; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a OpenCL -b 32 -c Addresses %spv_file_s | FileCheck %s
               OpCapability Addresses
               OpCapability Kernel
               OpCapability Vector16
               OpCapability Float16Buffer
          %1 = OpExtInstImport "OpenCL.std"
               OpMemoryModel Physical32 OpenCL
               OpEntryPoint Kernel %7 "foo"
               OpSource OpenCL_C 102000
               OpName %in "in"
               OpName %loc "loc"
               OpName %entry "entry"
               OpName %call "call"
               OpName %call1 "call1"
               OpName %call2 "call2"
               OpName %call3 "call3"
               OpName %call4 "call4"
               OpName %call5 "call5"
               OpName %call6 "call6"
               OpName %call7 "call7"
               OpName %call8 "call8"
               OpName %call9 "call9"
               OpName %call10 "call10"
               OpName %call11 "call11"
       %uint = OpTypeInt 32 0
     %uint_0 = OpConstant %uint 0
       %void = OpTypeVoid
       %half = OpTypeFloat 16
%_ptr_CrossWorkgroup_half = OpTypePointer CrossWorkgroup %half
%_ptr_Workgroup_half = OpTypePointer Workgroup %half
          %6 = OpTypeFunction %void %_ptr_CrossWorkgroup_half %_ptr_Workgroup_half
      %float = OpTypeFloat 32
    %v2float = OpTypeVector %float 2
    %v3float = OpTypeVector %float 3
    %v4float = OpTypeVector %float 4
    %v8float = OpTypeVector %float 8
   %v16float = OpTypeVector %float 16
          %7 = OpFunction %void None %6
         %in = OpFunctionParameter %_ptr_CrossWorkgroup_half
        %loc = OpFunctionParameter %_ptr_Workgroup_half
      %entry = OpLabel
       %call = OpExtInst %float %1 vload_half %uint_0 %in
; CHECK: = call spir_func float @_Z10vload_halfjPU3AS1KDh(i32 0, ptr addrspace(1) %in)
      %call1 = OpExtInst %v2float %1 vload_halfn %uint_0 %in 2
; CHECK: = call spir_func <2 x float> @_Z11vload_half2jPU3AS1KDh(i32 0, ptr addrspace(1) %in)
      %call2 = OpExtInst %v3float %1 vload_halfn %uint_0 %in 3
; CHECK: = call spir_func <3 x float> @_Z11vload_half3jPU3AS1KDh(i32 0, ptr addrspace(1) %in)
      %call3 = OpExtInst %v4float %1 vload_halfn %uint_0 %in 4
; CHECK: = call spir_func <4 x float> @_Z11vload_half4jPU3AS1KDh(i32 0, ptr addrspace(1) %in)
      %call4 = OpExtInst %v8float %1 vload_halfn %uint_0 %in 8
; CHECK: = call spir_func <8 x float> @_Z11vload_half8jPU3AS1KDh(i32 0, ptr addrspace(1) %in)
      %call5 = OpExtInst %v16float %1 vload_halfn %uint_0 %in 16
; CHECK: = call spir_func <16 x float> @_Z12vload_half16jPU3AS1KDh(i32 0, ptr addrspace(1) %in)
      %call6 = OpExtInst %float %1 vload_half %uint_0 %loc
; CHECK: = call spir_func float @_Z10vload_halfjPU3AS3KDh(i32 0, ptr addrspace(3) %loc)
      %call7 = OpExtInst %v2float %1 vload_halfn %uint_0 %loc 2
; CHECK: = call spir_func <2 x float> @_Z11vload_half2jPU3AS3KDh(i32 0, ptr addrspace(3) %loc)
      %call8 = OpExtInst %v3float %1 vload_halfn %uint_0 %loc 3
; CHECK: = call spir_func <3 x float> @_Z11vload_half3jPU3AS3KDh(i32 0, ptr addrspace(3) %loc)
      %call9 = OpExtInst %v4float %1 vload_halfn %uint_0 %loc 4
; CHECK: = call spir_func <4 x float> @_Z11vload_half4jPU3AS3KDh(i32 0, ptr addrspace(3) %loc)
     %call10 = OpExtInst %v8float %1 vload_halfn %uint_0 %loc 8
; CHECK: = call spir_func <8 x float> @_Z11vload_half8jPU3AS3KDh(i32 0, ptr addrspace(3) %loc)
     %call11 = OpExtInst %v16float %1 vload_halfn %uint_0 %loc 16
; CHECK: = call spir_func <16 x float> @_Z12vload_half16jPU3AS3KDh(i32 0, ptr addrspace(3) %loc)
               OpReturn
               OpFunctionEnd
