; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a OpenCL -b 64 %spv_file_s -o %t
; RUN: opt -S --passes=always-inline %t -o - | FileCheck -- %s

                    OpCapability Addresses
                    OpCapability Kernel
                    OpCapability Groups

                    OpMemoryModel Physical64 OpenCL

                    OpEntryPoint Kernel %broadcast_fcn "broadcast"

                    OpName %broadcast_val "val"
                    OpName %broadcast_fcn "broadcast"
                    OpName %xyz "xyz"

         %void_ty = OpTypeVoid
        %uint_ty  = OpTypeInt 32 0
       %uint3_ty  = OpTypeVector %uint_ty 3
          %fcn_ty = OpTypeFunction %void_ty %uint_ty %uint3_ty
%work_group_scope = OpConstant %uint_ty 2

; CHECK: define spir_kernel void @broadcast(i32 noundef [[VAL:%.*]], <3 x i32> noundef [[XYZ:%.*]])
; CHECK:  [[X:%.*]] = extractelement <3 x i32> [[XYZ]], i64 0
; CHECK:  [[Y:%.*]] = extractelement <3 x i32> [[XYZ]], i64 1
; CHECK:  [[Z:%.*]] = extractelement <3 x i32> [[XYZ]], i64 2
; CHECK:  [[Xi64:%.*]] = zext i32 [[X]] to i64
; CHECK:  [[Yi64:%.*]] = zext i32 [[Y]] to i64
; CHECK:  [[Zi64:%.*]] = zext i32 [[Z]] to i64
; CHECK: [[RES:%.*]] = call spir_func i32 @_Z20work_group_broadcastjmmm(i32 [[VAL]], i64 [[Xi64]], i64 [[Yi64]], i64 [[Zi64]])
; CHECK: ret void
%broadcast_fcn = OpFunction %void_ty None %fcn_ty
%broadcast_val = OpFunctionParameter %uint_ty
           %xyz = OpFunctionParameter %uint3_ty
 %broadcast_bb = OpLabel
%broadcast_res = OpGroupBroadcast %uint_ty %work_group_scope %broadcast_val %xyz
                 OpReturn
                 OpFunctionEnd
