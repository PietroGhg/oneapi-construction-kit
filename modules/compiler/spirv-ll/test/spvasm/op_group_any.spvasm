; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a OpenCL -b 64 %spv_file_s -o %t
; RUN: opt -S --passes=always-inline %t -o - | FileCheck -- %s

                              OpCapability Addresses
                              OpCapability Kernel
                              OpCapability Groups

                              OpMemoryModel Physical64 OpenCL

                              OpEntryPoint Kernel %sub_group_any_fcn "sub_group_any"
                              OpEntryPoint Kernel %work_group_any_fcn "work_group_any"
                              OpEntryPoint Kernel %variable_scope_any_fcn "variable_scope_any"

                              OpName %sub_group_any_in "a"
                              OpName %work_group_any_in "a"
                              OpName %variable_scope_any_in "a"

                  %uint_ty  = OpTypeInt 32 0
                   %bool_ty = OpTypeBool
%ptr_CrossWorkgroup_bool_ty = OpTypePointer CrossWorkgroup %bool_ty
                   %void_ty = OpTypeVoid
                    %fcn_ty = OpTypeFunction %void_ty %ptr_CrossWorkgroup_bool_ty
     %variable_scope_fcn_ty = OpTypeFunction %void_ty %ptr_CrossWorkgroup_bool_ty %uint_ty

          %work_group_scope = OpConstant %uint_ty 2
           %sub_group_scope = OpConstant %uint_ty 3

; CHECK: define spir_kernel void @sub_group_any(ptr addrspace(1) noundef [[IN:%.*]])
         %sub_group_any_fcn = OpFunction %void_ty None %fcn_ty
          %sub_group_any_in = OpFunctionParameter %ptr_CrossWorkgroup_bool_ty
          %sub_group_any_bb = OpLabel
; CHECK: [[VALI1:%.*]] = load i1, ptr addrspace(1) [[IN]], align 4
         %sub_group_any_val = OpLoad %bool_ty %sub_group_any_in Aligned 4
; CHECK: [[VALI32:%.*]] = sext i1 [[VALI1]] to i32
; CHECK: [[RESI32:%.*]] = call spir_func i32 @_Z13sub_group_anyi(i32 [[VALI32]])
; CHECK: [[RESI1:%.*]] = trunc i32 [[RESI32]] to i1
         %sub_group_any_res = OpGroupAny %bool_ty %sub_group_scope %sub_group_any_val
; CHECK: store i1 [[RESI1]], ptr addrspace(1) [[IN]]
                              OpStore %sub_group_any_in %sub_group_any_res Aligned 4
; CHECK: ret void
                              OpReturn
                              OpFunctionEnd

; CHECK: define spir_kernel void @work_group_any(ptr addrspace(1) noundef [[IN:%.*]])
        %work_group_any_fcn = OpFunction %void_ty None %fcn_ty
         %work_group_any_in = OpFunctionParameter %ptr_CrossWorkgroup_bool_ty
         %work_group_any_bb = OpLabel
; CHECK: [[VALI1:%.*]] = load i1, ptr addrspace(1) [[IN]], align 4
        %work_group_any_val = OpLoad %bool_ty %work_group_any_in Aligned 4
; CHECK: [[VALI32:%.*]] = sext i1 [[VALI1]] to i32
; CHECK: [[RESI32:%.*]] = call spir_func i32 @_Z14work_group_anyi(i32 [[VALI32]])
; CHECK: [[RESI1:%.*]] = trunc i32 [[RESI32]] to i1
        %work_group_any_res = OpGroupAny %bool_ty %work_group_scope %work_group_any_val
; CHECK: store i1 [[RESI1]], ptr addrspace(1) [[IN]]
                             OpStore %work_group_any_in %work_group_any_res Aligned 4
; CHECK: ret void
                             OpReturn
                             OpFunctionEnd

; CHECK: define spir_kernel void @variable_scope_any(ptr addrspace(1) noundef %a, i32 noundef %0)
    %variable_scope_any_fcn = OpFunction %void_ty None %variable_scope_fcn_ty
     %variable_scope_any_in = OpFunctionParameter %ptr_CrossWorkgroup_bool_ty
                     %scope = OpFunctionParameter %uint_ty
     %variable_scope_any_bb = OpLabel
    %variable_scope_any_val = OpLoad %bool_ty %variable_scope_any_in Aligned 4
; CHECK: call spir_func i32 @_Z14work_group_anyi(i32 {{%.*}})
; CHECK: call spir_func i32 @_Z13sub_group_anyi(i32 {{%.*}})
    %variable_scope_any_res = OpGroupAny %bool_ty %scope %variable_scope_any_val
                              OpStore %variable_scope_any_in %variable_scope_any_res Aligned 4
                              OpReturn
                              OpFunctionEnd
