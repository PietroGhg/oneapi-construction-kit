; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a OpenCL -b 32 -c Addresses %spv_file_s | FileCheck %s
               OpCapability Addresses
               OpCapability Kernel
               OpCapability Vector16
               OpCapability Float16Buffer
          %1 = OpExtInstImport "OpenCL.std"
               OpMemoryModel Physical32 OpenCL
               OpEntryPoint Kernel %7 "foo"
               OpSource OpenCL_C 102000
               OpName %out "out"
               OpName %loc "loc"
               OpName %entry "entry"
       %uint = OpTypeInt 32 0
     %uint_0 = OpConstant %uint 0
       %void = OpTypeVoid
       %half = OpTypeFloat 16
%_ptr_CrossWorkgroup_half = OpTypePointer CrossWorkgroup %half
%_ptr_Workgroup_half = OpTypePointer Workgroup %half
          %6 = OpTypeFunction %void %_ptr_CrossWorkgroup_half %_ptr_Workgroup_half
      %float = OpTypeFloat 32
    %v2float = OpTypeVector %float 2
    %v3float = OpTypeVector %float 3
    %v4float = OpTypeVector %float 4
    %v8float = OpTypeVector %float 8
   %v16float = OpTypeVector %float 16
    %float_1 = OpConstant %float 1
    %float_2 = OpConstant %float 2
         %18 = OpConstantComposite %v2float %float_2 %float_2
    %float_3 = OpConstant %float 3
         %22 = OpConstantComposite %v3float %float_3 %float_3 %float_3
    %float_4 = OpConstant %float 4
         %26 = OpConstantComposite %v4float %float_4 %float_4 %float_4 %float_4
    %float_8 = OpConstant %float 8
         %30 = OpConstantComposite %v8float %float_8 %float_8 %float_8 %float_8 %float_8 %float_8 %float_8 %float_8
   %float_16 = OpConstant %float 16
         %34 = OpConstantComposite %v16float %float_16 %float_16 %float_16 %float_16 %float_16 %float_16 %float_16 %float_16 %float_16 %float_16 %float_16 %float_16 %float_16 %float_16 %float_16 %float_16
          %7 = OpFunction %void None %6
         %out = OpFunctionParameter %_ptr_CrossWorkgroup_half
        %loc = OpFunctionParameter %_ptr_Workgroup_half
      %entry = OpLabel
         %15 = OpExtInst %void %1 vstore_half %float_1 %uint_0 %out
; CHECK: call spir_func void @_Z11vstore_halffjPU3AS1Dh(float 1.000000e+00, i32 0, ptr addrspace(1) %out)
         %19 = OpExtInst %void %1 vstore_halfn %18 %uint_0 %out
; CHECK: call spir_func void @_Z12vstore_half2Dv2_fjPU3AS1Dh(<2 x float> <float 2.000000e+00, float 2.000000e+00>, i32 0, ptr addrspace(1) %out)
         %23 = OpExtInst %void %1 vstore_halfn %22 %uint_0 %out
; CHECK: call spir_func void @_Z12vstore_half3Dv3_fjPU3AS1Dh(<3 x float> <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>, i32 0, ptr addrspace(1) %out)
         %27 = OpExtInst %void %1 vstore_halfn %26 %uint_0 %out
; CHECK: call spir_func void @_Z12vstore_half4Dv4_fjPU3AS1Dh(<4 x float> <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>, i32 0, ptr addrspace(1) %out)
         %31 = OpExtInst %void %1 vstore_halfn %30 %uint_0 %out
; CHECK: call spir_func void @_Z12vstore_half8Dv8_fjPU3AS1Dh(<8 x float> <float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00>, i32 0, ptr addrspace(1) %out)
         %35 = OpExtInst %void %1 vstore_halfn %34 %uint_0 %out
; CHECK: call spir_func void @_Z13vstore_half16Dv16_fjPU3AS1Dh(<16 x float> <float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01>, i32 0, ptr addrspace(1) %out)
         %36 = OpExtInst %void %1 vstore_half %float_1 %uint_0 %loc
; CHECK: call spir_func void @_Z11vstore_halffjPU3AS3Dh(float 1.000000e+00, i32 0, ptr addrspace(3) %loc)
         %37 = OpExtInst %void %1 vstore_halfn %18 %uint_0 %loc
; CHECK: call spir_func void @_Z12vstore_half2Dv2_fjPU3AS3Dh(<2 x float> <float 2.000000e+00, float 2.000000e+00>, i32 0, ptr addrspace(3) %loc)
         %38 = OpExtInst %void %1 vstore_halfn %22 %uint_0 %loc
; CHECK: call spir_func void @_Z12vstore_half3Dv3_fjPU3AS3Dh(<3 x float> <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>, i32 0, ptr addrspace(3) %loc)
         %39 = OpExtInst %void %1 vstore_halfn %26 %uint_0 %loc
; CHECK: call spir_func void @_Z12vstore_half4Dv4_fjPU3AS3Dh(<4 x float> <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>, i32 0, ptr addrspace(3) %loc)
         %40 = OpExtInst %void %1 vstore_halfn %30 %uint_0 %loc
; CHECK: call spir_func void @_Z12vstore_half8Dv8_fjPU3AS3Dh(<8 x float> <float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00, float 8.000000e+00>, i32 0, ptr addrspace(3) %loc)
         %41 = OpExtInst %void %1 vstore_halfn %34 %uint_0 %loc
; CHECK: call spir_func void @_Z13vstore_half16Dv16_fjPU3AS3Dh(<16 x float> <float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01, float 1.600000e+01>, i32 0, ptr addrspace(3) %loc)
               OpReturn
               OpFunctionEnd
