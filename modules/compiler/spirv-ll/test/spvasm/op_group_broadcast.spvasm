; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a OpenCL -b 64 %spv_file_s -o %t
; RUN: opt -S --passes=always-inline %t -o - | FileCheck -- %s

                               OpCapability Addresses
                               OpCapability Kernel
                               OpCapability Groups

                               OpMemoryModel Physical64 OpenCL

                               OpEntryPoint Kernel %sub_group_uint_broadcast_fcn "sub_group_uint_broadcast"
                               OpEntryPoint Kernel %work_group_uint_broadcast_fcn "work_group_uint_broadcast"
                               OpEntryPoint Kernel %variable_scope_uint_broadcast_fcn "variable_scope_uint_broadcast"
                               OpEntryPoint Kernel %float_broadcast_fcn "float_broadcast"
                               OpEntryPoint Kernel %bool_broadcast_fcn "bool_broadcast"

                               OpName %float_broadcast_in "a"
                               OpName %bool_broadcast_in "a"

                   %uint_ty  = OpTypeInt 32 0
                  %float_ty  = OpTypeFloat 32
                   %bool_ty  = OpTypeBool
 %ptr_CrossWorkgroup_uint_ty = OpTypePointer CrossWorkgroup %uint_ty
%ptr_CrossWorkgroup_float_ty = OpTypePointer CrossWorkgroup %float_ty
 %ptr_CrossWorkgroup_bool_ty = OpTypePointer CrossWorkgroup %bool_ty
                    %void_ty = OpTypeVoid
                %uint_fcn_ty = OpTypeFunction %void_ty %ptr_CrossWorkgroup_uint_ty
           %uint_uint_fcn_ty = OpTypeFunction %void_ty %ptr_CrossWorkgroup_uint_ty %uint_ty
               %float_fcn_ty = OpTypeFunction %void_ty %ptr_CrossWorkgroup_float_ty
                %bool_fcn_ty = OpTypeFunction %void_ty %ptr_CrossWorkgroup_bool_ty

            %sub_group_scope = OpConstant %uint_ty 3
           %work_group_scope = OpConstant %uint_ty 2
                       %zero = OpConstant %uint_ty 0

; CHCK-LABEL: sub_group_uint_broadcast
; CHECK: define spir_kernel void @sub_group_uint_broadcast(ptr addrspace(1) noundef [[IN:%.*]])
%sub_group_uint_broadcast_fcn = OpFunction %void_ty None %uint_fcn_ty
           %uint_broadcast_in = OpFunctionParameter %ptr_CrossWorkgroup_uint_ty
           %uint_broadcast_bb = OpLabel
; CHECK: [[VAL:%.*]] = load i32, ptr addrspace(1) [[IN]], align 4
          %uint_broadcast_val = OpLoad %uint_ty %uint_broadcast_in Aligned 4
; CHECK: [[RES:%.*]] = call spir_func i32 @_Z19sub_group_broadcastjj(i32 [[VAL]], i32 0)
          %uint_broadcast_res = OpGroupBroadcast %uint_ty %sub_group_scope %uint_broadcast_val %zero
; CHECK: store i32 [[RES]], ptr addrspace(1) [[IN]]
                                OpStore %uint_broadcast_in %uint_broadcast_res Aligned 4
; CHECK: ret void
                                OpReturn
                                OpFunctionEnd

; CHCK-LABEL: work_group_uint_broadcast
; CHECK: define spir_kernel void @work_group_uint_broadcast(ptr addrspace(1) noundef [[IN:%.*]])
%work_group_uint_broadcast_fcn = OpFunction %void_ty None %uint_fcn_ty
 %uint_work_group_broadcast_in = OpFunctionParameter %ptr_CrossWorkgroup_uint_ty
 %uint_work_group_broadcast_bb = OpLabel
; CHECK: [[VAL:%.*]] = load i32, ptr addrspace(1) [[IN]], align 4
%uint_work_group_broadcast_val = OpLoad %uint_ty %uint_work_group_broadcast_in Aligned 4
; CHECK: [[RES:%.*]] = call spir_func i32 @_Z20work_group_broadcastjm(i32 [[VAL]], i64 0)
%uint_work_group_broadcast_res = OpGroupBroadcast %uint_ty %work_group_scope %uint_work_group_broadcast_val %zero
; CHECK: store i32 [[RES]], ptr addrspace(1) [[IN]]
                                 OpStore %uint_work_group_broadcast_in %uint_work_group_broadcast_res Aligned 4
; CHECK: ret void
                                 OpReturn
                                 OpFunctionEnd

; CHCK-LABEL: variable_scope_uint_broadcast
; CHECK: define spir_kernel void @variable_scope_uint_broadcast(ptr addrspace(1) noundef [[IN:%.*]], i32 noundef %{{.*}})
%variable_scope_uint_broadcast_fcn = OpFunction %void_ty None %uint_uint_fcn_ty
 %uint_variable_scope_broadcast_in = OpFunctionParameter %ptr_CrossWorkgroup_uint_ty
                            %scope = OpFunctionParameter %uint_ty
 %uint_variable_scope_broadcast_bb = OpLabel
; CHECK: [[VAL:%.*]] = load i32, ptr addrspace(1) [[IN]], align 4
%uint_variable_scope_broadcast_val = OpLoad %uint_ty %uint_variable_scope_broadcast_in Aligned 4
; CHECK: [[RES:%.*]] = call spir_func i32 @_Z20work_group_broadcastjm(i32 [[VAL]], i64 0)
; CHECK: [[RES:%.*]] = call spir_func i32 @_Z19sub_group_broadcastjj(i32 [[VAL]], i32 0)
%uint_variable_scope_broadcast_res = OpGroupBroadcast %uint_ty %scope %uint_variable_scope_broadcast_val %zero
                                     OpStore %uint_variable_scope_broadcast_in %uint_variable_scope_broadcast_res Aligned 4
; CHECK: ret void
                                     OpReturn
                                     OpFunctionEnd

; CHCK-LABEL: float_broadcast
; CHECK: define spir_kernel void @float_broadcast(ptr addrspace(1) noundef [[IN:%.*]])
        %float_broadcast_fcn = OpFunction %void_ty None %float_fcn_ty
         %float_broadcast_in = OpFunctionParameter %ptr_CrossWorkgroup_float_ty
         %float_broadcast_bb = OpLabel
; CHECK: [[VAL:%.*]] = load float, ptr addrspace(1) [[IN]], align 4
        %float_broadcast_val = OpLoad %float_ty %float_broadcast_in Aligned 4
; CHECK: [[RES:%.*]] = call spir_func float @_Z19sub_group_broadcastfj(float [[VAL]], i32 0)
        %float_broadcast_res = OpGroupBroadcast %float_ty %sub_group_scope %float_broadcast_val %zero
; CHECK: store float [[RES]], ptr addrspace(1) [[IN]]
                               OpStore %float_broadcast_in %float_broadcast_res Aligned 4
; CHECK: ret void
                               OpReturn
                               OpFunctionEnd

; CHECK: declare spir_func float @_Z19sub_group_broadcastfj(float, i32)

; CHCK-LABEL: bool_broadcast
; CHECK: define spir_kernel void @bool_broadcast(ptr addrspace(1) noundef [[IN:%.*]])
         %bool_broadcast_fcn = OpFunction %void_ty None %bool_fcn_ty
          %bool_broadcast_in = OpFunctionParameter %ptr_CrossWorkgroup_bool_ty
          %bool_broadcast_bb = OpLabel
; CHECK: [[VALI1:%.*]] = load i1, ptr addrspace(1) [[IN]], align 4
         %bool_broadcast_val = OpLoad %bool_ty %bool_broadcast_in Aligned 4
; CHECK: [[VALI32:%.*]] = sext i1 [[VALI1]] to i32
; CHECK: [[RESI32:%.*]] = call spir_func i32 @_Z19sub_group_broadcastij(i32 [[VALI32]], i32 0)
         %bool_broadcast_res = OpGroupBroadcast %bool_ty %sub_group_scope %bool_broadcast_val %zero
; CHECK: [[RESI1:%.*]] = trunc i32 [[RESI32]] to i1
; CHECK: store i1 [[RESI1]], ptr addrspace(1) [[IN]]
                               OpStore %bool_broadcast_in %bool_broadcast_res Aligned 4
; CHECK: ret void
                               OpReturn
                               OpFunctionEnd
