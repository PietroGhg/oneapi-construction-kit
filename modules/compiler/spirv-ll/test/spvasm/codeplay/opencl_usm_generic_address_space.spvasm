; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: spirv-ll-tool -a OpenCL -e SPV_codeplay_usm_generic_storage_class -b 64 -c GenericPointer %spv_file_s | FileCheck %s
               OpCapability Addresses
               OpCapability Linkage
               OpCapability Kernel
               OpCapability Int64
               OpCapability GenericPointer
               OpExtension "SPV_codeplay_usm_generic_storage_class"
          %1 = OpExtInstImport "OpenCL.std"
               OpMemoryModel Physical64 OpenCL
               OpEntryPoint Kernel %11 "test" %__spirv_BuiltInLocalInvocationId %__spirv_BuiltInGlobalInvocationId
               OpSource OpenCL_C 102000
               OpDecorate %54 Constant
         %54 = OpDecorationGroup
               OpDecorate %55 Alignment 4
         %55 = OpDecorationGroup
               OpDecorate %__spirv_BuiltInLocalInvocationId BuiltIn LocalInvocationId
               OpDecorate %__spirv_BuiltInGlobalInvocationId BuiltIn GlobalInvocationId
               OpDecorate %__spirv_BuiltInGlobalInvocationId LinkageAttributes "__spirv_BuiltInGlobalInvocationId" Import
               OpDecorate %__spirv_BuiltInLocalInvocationId LinkageAttributes "__spirv_BuiltInLocalInvocationId" Import
               OpGroupDecorate %54 %__spirv_BuiltInLocalInvocationId %__spirv_BuiltInGlobalInvocationId
               OpGroupDecorate %55 %lid %gid %index
      %ulong = OpTypeInt 64 0
    %v3ulong = OpTypeVector %ulong 3
%_ptr_Input_v3ulong = OpTypePointer Input %v3ulong
%__spirv_BuiltInLocalInvocationId = OpVariable %_ptr_Input_v3ulong Input
%__spirv_BuiltInGlobalInvocationId = OpVariable %_ptr_Input_v3ulong Input
       %void = OpTypeVoid
       %uint = OpTypeInt 32 0
%_ptr_Generic_uint = OpTypePointer Generic %uint
         %10 = OpTypeFunction %void %_ptr_Generic_uint %_ptr_Generic_uint %_ptr_Generic_uint
%_ptr_Generic__ptr_Generic_uint = OpTypePointer Generic %_ptr_Generic_uint
   %uint_256 = OpConstant %uint 256
     %uint_2 = OpConstant %uint 2
   %uint_272 = OpConstant %uint 272
; First four CHECKs are just making sure all the ways you can declare some kind
; of variable are covered: we have global and local OpFunctionParameters, a
; function scope OpVariable and a couple of OpVariables that represent work item
; builtins.
; CHECK: define spir_kernel void @test(ptr noundef{{( %.*)?}}, ptr noundef{{( %.*)?}}, ptr noundef{{( %.*)?}})
         %11 = OpFunction %void DontInline %10
        %src = OpFunctionParameter %_ptr_Generic_uint
        %dst = OpFunctionParameter %_ptr_Generic_uint
  %localBuff = OpFunctionParameter %_ptr_Generic_uint
      %entry = OpLabel
; CHECK: = alloca i32, align 4
      %index = OpVariable %_ptr_Generic_uint Generic
; CHECK: = call spir_func i64 @_Z12get_local_idj(i32 {{%.*}})
         %23 = OpLoad %v3ulong %__spirv_BuiltInLocalInvocationId
       %call = OpCompositeExtract %ulong %23 0
        %lid = OpUConvert %uint %call
; CHECK: = call spir_func i64 @_Z13get_global_idj(i32 {{%.*}})
         %26 = OpLoad %v3ulong %__spirv_BuiltInGlobalInvocationId
         %24 = OpCompositeExtract %ulong %26 0
        %gid = OpUConvert %uint %24
        %mul = OpIMul %uint %gid %uint_256
        %add = OpIAdd %uint %mul %lid
               OpStore %index %add Aligned 4
         %35 = OpLoad %uint %index Aligned 4
    %idxprom = OpSConvert %ulong %35
   %arrayidx = OpInBoundsPtrAccessChain %_ptr_Generic_uint %src %idxprom
         %38 = OpLoad %uint %arrayidx Aligned 4
   %idxprom3 = OpSConvert %ulong %lid
  %arrayidx4 = OpInBoundsPtrAccessChain %_ptr_Generic_uint %localBuff %idxprom3
               OpStore %arrayidx4 %38 Aligned 4
               OpControlBarrier %uint_2 %uint_2 %uint_272
   %idxprom5 = OpSConvert %ulong %lid
  %arrayidx6 = OpInBoundsPtrAccessChain %_ptr_Generic_uint %localBuff %idxprom5
         %49 = OpLoad %uint %arrayidx6 Aligned 4
         %51 = OpLoad %uint %index Aligned 4
   %idxprom7 = OpSConvert %ulong %51
; Finally check the end result of the kernel is what we expect
; CHECK: = getelementptr inbounds i32, ptr {{%.*}}, i64 {{%.*}}
  %arrayidx8 = OpInBoundsPtrAccessChain %_ptr_Generic_uint %dst %idxprom7
; store i32 {{%.*}}, i32* {{%.*}}, align 4
               OpStore %arrayidx8 %49 Aligned 4
               OpReturn
               OpFunctionEnd
