; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a OpenCL -b 64 %spv_file_s -o %t
; RUN: opt -S --passes=always-inline %t -o - | FileCheck -- %s

                                OpCapability Addresses
                                OpCapability Kernel
                                OpCapability Groups

                                OpMemoryModel Physical64 OpenCL

                                OpEntryPoint Kernel %uint_sub_group_reduction_fcn "uint_sub_group_reduction"
                                OpEntryPoint Kernel %uint_work_group_reduction_fcn "uint_work_group_reduction"
                                OpEntryPoint Kernel %uint_variable_scope_reduction_fcn "uint_variable_scope_reduction"
                                OpEntryPoint Kernel %uint_sub_group_scan_inc_fcn "uint_sub_group_scan_inclusive"

                                OpName %uint_sub_group_reduction_in "a"
                                OpName %uint_work_group_reduction_in "a"
                                OpName %uint_variable_scope_reduction_in "a"
                                OpName %uint_sub_group_scan_inc_in "a"

                    %uint_ty  = OpTypeInt 32 0
  %ptr_CrossWorkgroup_uint_ty = OpTypePointer CrossWorkgroup %uint_ty
                     %void_ty = OpTypeVoid
                 %uint_fcn_ty = OpTypeFunction %void_ty %ptr_CrossWorkgroup_uint_ty
            %uint_uint_fcn_ty = OpTypeFunction %void_ty %ptr_CrossWorkgroup_uint_ty %uint_ty

             %sub_group_scope = OpConstant %uint_ty 3
            %work_group_scope = OpConstant %uint_ty 2

; CHCK-LABEL: uint_sub_group_reduction
; CHECK: define spir_kernel void @uint_sub_group_reduction(ptr addrspace(1) noundef [[IN:%.*]])
%uint_sub_group_reduction_fcn = OpFunction %void_ty None %uint_fcn_ty
 %uint_sub_group_reduction_in = OpFunctionParameter %ptr_CrossWorkgroup_uint_ty
 %uint_sub_group_reduction_bb = OpLabel
; CHECK: [[VAL:%.*]] = load i32, ptr addrspace(1) [[IN]], align 4
%uint_sub_group_reduction_val = OpLoad %uint_ty %uint_sub_group_reduction_in Aligned 4
; CHECK: [[RES:%.*]] = call spir_func i32 @_Z20sub_group_reduce_addj(i32 [[VAL]])
%uint_sub_group_reduction_res = OpGroupIAdd %uint_ty %sub_group_scope Reduce %uint_sub_group_reduction_val
; CHECK: store i32 [[RES]], ptr addrspace(1) [[IN]]
                                OpStore %uint_sub_group_reduction_in %uint_sub_group_reduction_res Aligned 4
; CHECK: ret void
                                OpReturn
                                OpFunctionEnd
; CHECK: declare spir_func i32 @_Z20sub_group_reduce_addj(i32)

; CHCK-LABEL: uint_work_group_reduction
; CHECK: define spir_kernel void @uint_work_group_reduction(ptr addrspace(1) noundef [[IN:%.*]])
%uint_work_group_reduction_fcn = OpFunction %void_ty None %uint_fcn_ty
 %uint_work_group_reduction_in = OpFunctionParameter %ptr_CrossWorkgroup_uint_ty
 %uint_work_group_reduction_bb = OpLabel
; CHECK: [[VAL:%.*]] = load i32, ptr addrspace(1) [[IN]], align 4
%uint_work_group_reduction_val = OpLoad %uint_ty %uint_work_group_reduction_in Aligned 4
; CHECK: [[RES:%.*]] = call spir_func i32 @_Z21work_group_reduce_addj(i32 [[VAL]])
%uint_work_group_reduction_res = OpGroupIAdd %uint_ty %work_group_scope Reduce %uint_work_group_reduction_val
; CHECK: store i32 [[RES]], ptr addrspace(1) [[IN]]
                                OpStore %uint_work_group_reduction_in %uint_work_group_reduction_res Aligned 4
; CHECK: ret void
                                OpReturn
                                OpFunctionEnd

; CHCK-LABEL: uint_variable_scope_reduction
; CHECK: define spir_kernel void @uint_variable_scope_reduction(ptr addrspace(1) noundef [[IN:%.*]], i32 noundef %{{.*}})
%uint_variable_scope_reduction_fcn = OpFunction %void_ty None %uint_uint_fcn_ty
 %uint_variable_scope_reduction_in = OpFunctionParameter %ptr_CrossWorkgroup_uint_ty
                            %scope = OpFunctionParameter %uint_ty
 %uint_variable_scope_reduction_bb = OpLabel
; CHECK: [[VAL:%.*]] = load i32, ptr addrspace(1) [[IN]], align 4
%uint_variable_scope_reduction_val = OpLoad %uint_ty %uint_variable_scope_reduction_in Aligned 4
; CHECK: [[RES:%.*]] = call spir_func i32 @_Z21work_group_reduce_addj(i32 [[VAL]])
; CHECK: [[RES:%.*]] = call spir_func i32 @_Z20sub_group_reduce_addj(i32 [[VAL]])
%uint_variable_scope_reduction_res = OpGroupIAdd %uint_ty %scope Reduce %uint_variable_scope_reduction_val
                                OpStore %uint_variable_scope_reduction_in %uint_variable_scope_reduction_res Aligned 4
; CHECK: ret void
                                OpReturn
                                OpFunctionEnd

; CHCK-LABEL: uint_sub_group_inclusive_scan
; CHECK: define spir_kernel void @uint_sub_group_scan_inclusive(ptr addrspace(1) noundef [[IN:%.*]])
 %uint_sub_group_scan_inc_fcn = OpFunction %void_ty None %uint_fcn_ty
  %uint_sub_group_scan_inc_in = OpFunctionParameter %ptr_CrossWorkgroup_uint_ty
  %uint_sub_group_scan_inc_bb = OpLabel
; CHECK: [[VAL:%.*]] = load i32, ptr addrspace(1) [[IN]], align 4
 %uint_sub_group_scan_inc_val = OpLoad %uint_ty %uint_sub_group_scan_inc_in Aligned 4
; CHECK: [[RES:%.*]] = call spir_func i32 @_Z28sub_group_scan_inclusive_addj(i32 [[VAL]])
 %uint_sub_group_scan_inc_res = OpGroupIAdd %uint_ty %sub_group_scope InclusiveScan %uint_sub_group_scan_inc_val
; CHECK: store i32 [[RES]], ptr addrspace(1) [[IN]]
                                OpStore %uint_sub_group_scan_inc_in %uint_sub_group_scan_inc_res Aligned 4
; CHECK: ret void
                                OpReturn
                                OpFunctionEnd
; CHECK: declare spir_func i32 @_Z28sub_group_scan_inclusive_addj(i32)
