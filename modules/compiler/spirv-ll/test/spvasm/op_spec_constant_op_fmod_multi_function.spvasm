; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a OpenCL -b 64 -c Float64 %spv_file_s | FileCheck %s
            OpCapability Kernel
            OpCapability Addresses
            OpCapability Float64
       %1 = OpExtInstImport "OpenCL.std"
            OpMemoryModel Physical64 OpenCL
            OpEntryPoint Kernel %testfn "testfn"
            OpSource OpenCL_C 102000
            OpName %add "add"
            OpName %res "res"
            OpName %test "test"
            OpName %const "const"
            OpDecorate %test SpecId 0
    %void = OpTypeVoid
       %3 = OpTypeFunction %void
  %double = OpTypeFloat 64
%func_double = OpTypeFunction %double %double %double
%ptr_double = OpTypePointer Function %double
    %test = OpSpecConstant %double -42.42
   %const = OpConstant %double 42.42
      %11 = OpSpecConstantOp %double FMod %const %const
      %12 = OpSpecConstantOp %double FMod %test %11
     %add = OpFunction %double None %func_double
       %a = OpFunctionParameter %double
       %b = OpFunctionParameter %double
       %6 = OpLabel
       %7 = OpFAdd %double %a %b
       %8 = OpFAdd %double %7 %12
            OpReturnValue %8
            OpFunctionEnd
  %testfn = OpFunction %void None %3
       %5 = OpLabel
     %res = OpVariable %ptr_double Function
      %20 = OpFunctionCall %double %add %11 %12
            OpStore %res %20
            OpReturn
            OpFunctionEnd
; CHECK: ; ModuleID = '{{.*}}'
; CHECK: define private spir_func double @add(double{{( %0)?}}, double{{( %1)?}})
; CHECK: init_spec_constants:
; CHECK: [[MOD_A:%.*]] = call spir_func double @_Z4fmoddd(double 4.242000e+01, double 4.242000e+01)
; CHECK: [[SPEC_A:%.*]] = call spir_func double @_Z8copysigndd(double [[MOD_A]], double 4.242000e+01)
; CHECK: [[MOD_B:%.*]] = call spir_func double @_Z4fmoddd(double -4.242000e+01, double [[SPEC_A]])
; CHECK: [[SPEC_B:%.*]] = call spir_func double @_Z8copysigndd(double [[MOD_B]], double [[SPEC_A]])
; CHECK: br label {{%.*}}
; CHECK: [[ADD:%.*]] = fadd double {{%.*}}, {{%.*}}
; CHECK: [[RET:%.*]] = fadd double [[ADD]], [[SPEC_B]]
; CHECK: ret double [[RET]]
; CHECK: define spir_kernel void @testfn()
; CHECK: init_spec_constants:
; CHECK: [[MOD_C:%.*]] = call spir_func double @_Z4fmoddd(double 4.242000e+01, double 4.242000e+01)
; CHECK: [[SPEC_C:%.*]] = call spir_func double @_Z8copysigndd(double [[MOD_C]], double 4.242000e+01)
; CHECK: [[MOD_D:%.*]] = call spir_func double @_Z4fmoddd(double -4.242000e+01, double [[SPEC_C]])
; CHECK: [[SPEC_D:%.*]] = call spir_func double @_Z8copysigndd(double [[MOD_D]], double [[SPEC_C]])
; CHECK: br label {{%.*}}
; CHECK: [[RES:%.*]] = alloca double
; CHECK: [[CALL:%.*]] = call spir_func double @add(double [[SPEC_C]], double [[SPEC_D]])
; CHECK: store double [[CALL]], ptr [[RES]]
; CHECK: ret void
