; Copyright (C) Codeplay Software Limited
;
; Licensed under the Apache License, Version 2.0 (the "License") with LLVM
; Exceptions; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
; License for the specific language governing permissions and limitations
; under the License.
;
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: %if online-spirv-as %{ spirv-as --target-env %spv_tgt_env -o %spv_file_s %s %}
; RUN: %if online-spirv-as %{ spirv-val %spv_file_s %}
; RUN: spirv-ll-tool -a OpenCL -b 64 %spv_file_s | FileCheck %s
; This tests for a potential bug where copying a pointer object simply makes
; the same pointer available through a new ID, which would make storing to it
; overwrite the original.
               OpCapability Kernel
               OpCapability Addresses
               OpMemoryModel Physical64 OpenCL
               OpEntryPoint Kernel %testfn "testfn"
               OpName %testfn "testfn"
               OpName %x "x"
               OpName %y "y"
               OpName %res "res"
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
      %float = OpTypeFloat 32
       %bool = OpTypeBool
%_ptr_Function_float = OpTypePointer Function %float
%_ptr_Function_bool = OpTypePointer Function %bool
%float_42_42 = OpConstant %float 42.42
%float_24_24 = OpConstant %float 24.24
     %testfn = OpFunction %void None %3
          %5 = OpLabel
          %x = OpVariable %_ptr_Function_float Function
        %res = OpVariable %_ptr_Function_bool Function
          %y = OpCopyObject %_ptr_Function_float %x
               OpStore %x %float_42_42
               OpStore %y %float_24_24
         %12 = OpLoad %float %x
         %13 = OpLoad %float %y
         %14 = OpLessOrGreater %bool %12 %13
               OpStore %res %14
               OpReturn
               OpFunctionEnd
; CHECK: ; ModuleID = '{{.*}}'
; CHECK: define spir_kernel void @testfn()
; CHECK: [[X:[%@].*]] = alloca float
; CHECK: = alloca i1
; CHECK: [[Y:[%@].*]] = alloca float
; CHECK: = load float, ptr [[X]]
; CHECK: store float {{[%@].*}}, ptr [[Y]]
; CHECK: store float {{(-?[0-9]+\.[0-9]+e\+[0-9]+|0x[0-9A-F]+)}}, ptr [[X]]
; CHECK: store float {{(-?[0-9]+\.[0-9]+e\+[0-9]+|0x[0-9A-F]+)}}, ptr [[Y]]
; CHECK: = load float, ptr [[X]]
; CHECK: = load float, ptr [[Y]]
; CHECK: = call spir_func i32 @_Z13islessgreaterff(float {{[%@].*}}, float {{[%@].*}})
; CHECK: = trunc i32 {{[%@].*}} to i1
; CHECK: store i1 {{[%@].*}}, ptr {{[%@].*}}
; CHECK: ret void
; CHECK: declare spir_func i32 @_Z13islessgreaterff(float, float)
