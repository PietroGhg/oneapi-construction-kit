diff --git a/source/refsi_hal.cpp b/source/refsi_hal.cpp
index 3fa5804..1c976d6 100644
--- a/source/refsi_hal.cpp
+++ b/source/refsi_hal.cpp
@@ -16,6 +16,8 @@
 
 #include "refsi_hal.h"
 
+#include <string.h>
+
 refsi_hal_device::refsi_hal_device(riscv::hal_device_info_riscv_t *info,
                                    refsi_device_t device,
                                    std::recursive_mutex &hal_lock)
@@ -55,24 +57,34 @@ bool refsi_hal_device::kernel_exec(hal::hal_program_t program,
 hal::hal_addr_t refsi_hal_device::mem_alloc(hal::hal_size_t size,
                                             hal::hal_size_t alignment) {
   refsi_locker locker(hal_lock);
-  return hal::hal_nullptr;
+  return refsiAllocDeviceMemory(device, size, alignment, DRAM);
 }
 
 bool refsi_hal_device::mem_free(hal::hal_addr_t addr) {
   refsi_locker locker(hal_lock);
-  return false;
+  return refsiFreeDeviceMemory(device, addr) == refsi_success;
 }
 
 bool refsi_hal_device::mem_read(void *dst, hal::hal_addr_t src,
                                 hal::hal_size_t size) {
   refsi_locker locker(hal_lock);
-  return false;
+  void *src_mem = refsiGetMappedAddress(device, src, size);
+  if (!src_mem) {
+    return false;
+  }
+  memcpy(dst, src_mem, size);
+  return true;
 }
 
 bool refsi_hal_device::mem_write(hal::hal_addr_t dst, const void *src,
                                  hal::hal_size_t size) {
   refsi_locker locker(hal_lock);
-  return false;
+  void *dst_mem = refsiGetMappedAddress(device, dst, size);
+  if (!dst_mem) {
+    return false;
+  }
+  memcpy(dst_mem, src, size);
+  return true;
 }
 
 bool refsi_hal_device::initialize() { return true; }
