diff --git a/include/refsi_hal.h b/include/refsi_hal.h
index ca7810f..5a96851 100644
--- a/include/refsi_hal.h
+++ b/include/refsi_hal.h
@@ -21,14 +21,19 @@
 
 #include "hal.h"
 #include "hal_riscv.h"
+#include "refsidrv/refsidrv.h"
 
 using refsi_locker = std::lock_guard<std::recursive_mutex>;
 
 class refsi_hal_device : public hal::hal_device_t {
  public:
-  refsi_hal_device(riscv::hal_device_info_riscv_t *info,
+  refsi_hal_device(riscv::hal_device_info_riscv_t *info, refsi_device_t device,
                    std::recursive_mutex &hal_lock);
 
+  virtual ~refsi_hal_device();
+
+  bool initialize();
+
   // find a specific kernel function in a compiled program
   // returns `hal_invalid_kernel` if no symbol could be found
   hal::hal_kernel_t program_find_kernel(hal::hal_program_t program,
@@ -66,6 +71,7 @@ class refsi_hal_device : public hal::hal_device_t {
  private:
   std::recursive_mutex &hal_lock;
   hal::hal_device_info_t *info;
+  refsi_device_t device;
 };
 
 #endif  // _HAL_REFSI_REFSI_HAL_H
diff --git a/source/hal_main.cpp b/source/hal_main.cpp
index 42e7782..263c157 100644
--- a/source/hal_main.cpp
+++ b/source/hal_main.cpp
@@ -43,10 +43,30 @@ class refsi_tutorial_hal : public hal::hal_t {
   }
 
   // request the creation of a new hal
-  hal::hal_device_t *device_create(uint32_t index) override { return nullptr; }
+  hal::hal_device_t *device_create(uint32_t index) override {
+    refsi_locker locker(lock);
+    if (!initialized || (index > 0)) {
+      return nullptr;
+    }
+    refsi_device_t device = refsiOpenDevice(REFSI_M);
+    if (!device) {
+      return nullptr;
+    }
+    refsi_hal_device *hal_device =
+        new refsi_hal_device(&hal_device_info, device, lock);
+    if (!hal_device->initialize()) {
+      delete hal_device;
+      return nullptr;
+    }
+    return hal_device;
+  }
 
   // destroy a device instance
-  bool device_delete(hal::hal_device_t *device) override { return false; }
+  bool device_delete(hal::hal_device_t *device) override {
+    // No locking - this is done by refsi_hal_device's destructor.
+    delete static_cast<refsi_hal_device *>(device);
+    return device != nullptr;
+  }
 
   refsi_tutorial_hal() {
     const char *target_name = "RefSi M1 Tutorial";
diff --git a/source/refsi_hal.cpp b/source/refsi_hal.cpp
index 5d704c7..3fa5804 100644
--- a/source/refsi_hal.cpp
+++ b/source/refsi_hal.cpp
@@ -17,8 +17,14 @@
 #include "refsi_hal.h"
 
 refsi_hal_device::refsi_hal_device(riscv::hal_device_info_riscv_t *info,
+                                   refsi_device_t device,
                                    std::recursive_mutex &hal_lock)
-    : hal::hal_device_t(info), hal_lock(hal_lock) {}
+    : hal::hal_device_t(info), hal_lock(hal_lock), device(device) {}
+
+refsi_hal_device::~refsi_hal_device() {
+  refsi_locker locker(hal_lock);
+  refsiShutdownDevice(device);
+}
 
 hal::hal_kernel_t refsi_hal_device::program_find_kernel(
     hal::hal_program_t program, const char *name) {
@@ -68,3 +74,5 @@ bool refsi_hal_device::mem_write(hal::hal_addr_t dst, const void *src,
   refsi_locker locker(hal_lock);
   return false;
 }
+
+bool refsi_hal_device::initialize() { return true; }
